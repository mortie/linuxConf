#!/usr/bin/env node

var spawn = require("child_process").spawn;

var macs = {};
macs[0] = macs.jay = "C0:28:8D:15:B6:28";
macs[1] = macs.magni = "C0:25:E9:2C:42:FE";

class Process {
	constructor(...args) {
		this.child = spawn.apply(null, args);

		this.awaiting = null;
		this.child.stderr.pipe(process.stderr);
		this.child.stdout.on("data", d => {
			process.stdout.write(d);
			if (this.awaiting == null)
				return;

			if (this.awaiting.pattern.test(d.toString())) {
				clearTimeout(this.awaiting.timeout);
				var res = this.awaiting.resolve;
				this.awaiting = null;
				res();
			}
		});
	}

	waitFor(pattern) {
		var timeout = setTimeout(() => {
			spawn("mnotify", [ "Timeout waiting for pattern", pattern ]);
			process.exit(1);
		}, 6000);

		return new Promise((resolve, reject) => {
			this.awaiting = { pattern, resolve, timeout };
		});
	}

	send(msg, pattern) {
		this.child.stdin.write(msg);
		return this.waitFor(pattern);
	}
}

async function connect(mac) {
	var proc = new Process("bluetoothctl");

	await proc.waitFor(/Agent registered/);
	await proc.send("power on\n", /Changing power on succeeded/);
	await proc.send("agent on\n", /Agent (is already registered|registered)/);
	await proc.send("default-agent\n", /Default agent request successful/);
	await proc.send("connect "+mac+"\n", /Connection successful/);

	spawn("mnotify", [ "Connected." ]);
}

var mac = macs[process.argv[2]];
if (!mac) {
	spawn("mnotify", [ "Unknown device", process.argv[2] ]);
	process.exit(1);
}

connect(mac);
