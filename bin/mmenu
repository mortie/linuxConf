#!/bin/sh

###################################################
# This is a wrapper around dmenu, providing basic #
# calculator-like functionality using python.     #
###################################################

# mmenu works the same as dmenu_run for the most part, except that if you type
# something that's not a command, the input string is fed to python. The result
# of running the expression is then shown as the prompt in a new run of dmenu.
# In this new run, only the entry '$' is available, and will exit the session;
# any other input will again be fed into python.
#
# Some additional things are available in your expression:
#     ans: The result of the previous expression.
#     base(num, b=16): convert num to base b.

# Some additional things:
#     `clip` after expressions will copy ans to your clipboard with 'xsel -ib'.

if [ "$1" = "" ]; then
	cmd=$(dmenu_path | dmenu)
else
	cmd=$(echo "$" | dmenu -p "$1")
	if [ "$cmd" = "$" ]; then
		exit 0
	fi
fi

if [ "$cmd" = "" ]; then
	exit 0
fi

exists() {
	which "$1" >/dev/null 2>/dev/null
}

if [ "$1" = "" ] && exists $(echo "$cmd" | cut -d ' ' -f 1); then
	echo "$cmd" | sh
elif [ "$cmd" = "clip" ]; then
	echo -n "$1" | xsel -ib
else
	pycode="
ans = $([ "$1" = "" ] && echo 0 || echo "$1")

def digit_to_char(digit):
	if digit < 10:
		return str(digit)
	return chr(ord('a') + digit - 10)

def base(num, b=16):
	if num < 0:
		return '-' + base(-num, b)
	(d, m) = divmod(num, b)
	if d > 0:
		return base(d, b) + digit_to_char(m)
	return digit_to_char(m)

res=''
try:
	res=($cmd)
except:
	res='Exception'

print('{!r}'.format(res))
"

	ans=$(python -c "$pycode")
	if [ $? = 0 ]; then
		$0 "$ans" # Rerun with previous output as input
	fi
fi
