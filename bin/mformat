#!/usr/bin/env node

/********************************************************************
 ** This script converts a file into something pandoc understands. **
 ********************************************************************/

var str = "";

var reps = [
	["(\\^[^ (){}\\[\\],\\.]+)", "$^{$1}$"]
];
reps = reps.map(function(arr) {
	return [new RegExp(arr[0], "g"), arr[1]];
});

process.stdin.on("data", function(data) {
	str += data;
});

function doStr(str, start, end) {
	var tmp = str.substring(0, start);
	tmp += "$";
	tmp += str.substring(start, end);
	tmp += "$";
	tmp += str.substring(end, str.length);
	return tmp;
}

process.stdin.on("end", function() {

	//Do all simple regex replacements
	reps.forEach(function(arr) {
		str = str.replace(arr[0], arr[1]);
	});

	var start = 0;
	var end = 0;
	var depth = 0;
	var inExpr = false;
	var inMath = false;
	for (var i = 0; i < str.length; ++i) {
		var prev = str[i - 1];
		var c = str[i];
		var next = str[i + 1];

		if (!inMath && !inExpr && c === "\\" && prev !== "\\" && !weirdChar(next)) {
			start = i;
			inExpr = true;
		} else if (!inExpr && !inMath && c === "$" && prev !== "\\") {
			inMath = true;
		} else if (!inExpr && inMath && c === "$" && prev !== "\\") {
			inMath = false;
		} else if (!inExpr && inMath && c === "\n" && prev === "\n") {
			inMath = false;
		} else if (inExpr && c === "{") {
			depth += 1;
		} else if (inExpr && c === "}") {
			depth -= 1;

			if (depth < 0) {
				str = doStr(str, start, i);

				start = 0;
				end = 0;
				depth = 0;
				inExpr = false;
			}
		} else if (inExpr && (
			(depth <= 0 && isSpace(c)) |
			(depth <= 0 && weirdChar(c))
		)) {
			str = doStr(str, start, i);

			i += 1;
			start = 0;
			end = 0;
			depth = 0;
			inExpr = false;
		}
	}

	console.log(str);
});

function isSpace(c) {
	return (c === " " || c === "\n" || c === "\r" || c === "\t");
}

function weirdChar(c) {
	return !/\w/.test(c);
}
