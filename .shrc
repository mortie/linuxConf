#!/bin/sh

alias ytdl="youtube-dl"
alias c="fasd_cd -d"
alias please="history -1 | awk '{\$1=\"\"; print substr(\$0,2)}' | xargs sudo"
alias rand="LC_ALL=C tr -dc A-Za-z0-9_ < /dev/urandom | head -c $1"
alias autoremove='sudo pacman -Rcns $(pacman -Qdtq)'
alias packer="packer --noedit"
alias pbin="curl -T - https://p.iotek.org"
alias diff="diff --color=auto"
alias make="make -j $(getconf _NPROCESSORS_ONLN)"

conntmux() {
	if [ -z "$2" ]; then
		session="gen"
	else
		session="$2"
	fi
	ssh "$1" -t "tmux attach -t \"$session\""
	if [ "$?" != 0 ]; then
		echo -n "The session '$session' doesn't exist. Create it? [Y/n] "
		read reply
		if [ "$reply" = "" ] || [ "$reply" = "y" ] || [ "$reply" = "Y" ]; then
			ssh "$1" -t "tmux new -s \"$session\""
		else
			echo "Exiting."
			return 1
		fi
	fi
}
gethosts() {
	for f in "$@"; do
		[ -f "$f" ] && cat "$f" | grep 'Host ' | cut -d ' ' -f 2
	done
}
for name in $(gethosts ~/.ssh/config ~/.ssh-local); do
	alias "$name"="conntmux $name"
done

to() {
	if ! echo "$(pwd)" | grep -q -- "$1/"; then
		echo "Dir not in path: '$1'"
		return 1
	fi

	while echo "$(pwd)" | grep -q -- "$1/?*"; do
		cd ..
	done
}

cddots() {
	cd "$1"
	[ "$2" != "" ] && cd "$2"
	return 0
}
dots=".."
ups="../"
for i in {1..20}; do
	alias "$dots"="cddots $ups"
	dots="$dots."
	ups="$ups../"
done
dots=""
ups=""
alias ","="cd"

mkcd() {
	DIR="$1"
	mkdir -p "$DIR"
	cd "$DIR"
}

cpt() {
	if [ "$1" = "" ]; then
		echo "Usage: $0 <host>"
		return 1
	fi
	scp -r . "${1}:tmp2"
	ssh -t "$1" 'rm -rf ~/tmp; mv ~/tmp2 ~/tmp; cd ~/tmp; bash'
}

pack() {
	if [ "$1" = "" ]; then
		NAME="martindn"
	else
		NAME="$1"
	fi
	rm "$NAME.tgz"
	DIR=$(pwd)
	TMP=$(mktemp -d /tmp/pack.XXXXXXXXXX)
	cp -r * "$TMP"
	cd "$TMP"
	mkdir "$NAME"
	mv * "$NAME" 2>/dev/null
	tar -czvf "$NAME.tgz" "$NAME"
	cd "$DIR"
	mv "$TMP/$NAME.tgz" .
	rm -rf "$TMP"
}

if [ ! "$TMUX" = "" ]; then
	export TERM="xterm-256color"
fi

cd() {
	builtin cd "$@"
	pwd > ~/.lastdir
}

if [ -f ~/.lastdir ]; then
	cd "$(cat ~/.lastdir)"
fi

if [ -f ~/.shrc-local ]; then
	. ~/.shrc-local
fi
